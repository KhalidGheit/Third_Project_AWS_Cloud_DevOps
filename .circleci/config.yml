version: 2.1
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            echo "Destroying environment ${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            apk add --update curl
            if [[ $(curl --insecure  https://kvdb.io/Y9jpPoK3nS5VZSsnKyBRv3/migration_<< parameters.workflow_id >>) == "1" ]];
            then
              echo "Reverting migrations"
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
                      
jobs:

# Building the application
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test-front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: test-back-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-front-end
          command: |
            cd frontend
            npm install
            
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-back-end
          command: |
            cd backend
            npm install
            npm install --save-dev webpack@5.74.0
            npm audit fix --audit-level=critical --force
            npm fund
            npm audit fix
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides "ID=${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides "ID=${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: install tar
          command: |
            yum update -y
            yum install tar -y
            yum install gzip -y
      - destroy_environment
  
      - run:
          name: Fetch public IP of EC2
          command: |
            cd .circleci/ansible
            echo " " >> inventory.txt
            echo "$(aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:logical-id,Values=EC2Instance" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)" >> inventory.txt  
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment

  configure-infrastracture:
    docker:
      - image: python:3.7-alpine3.11
    steps:
        - checkout
        - attach_workspace:
            at: ~/
        - add_ssh_keys:
                fingerprints: ["c3:e6:38:e9:9f:b0:1d:6a:1f:6d:11:49:0d:e9:93:c6"] 
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
              apk add --update tar
              apk add --update gzip
              pip3 install awscli
        - run:
            name: Run Playbook and Configure server
            command: |
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml
        - destroy_environment
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: [backend-build]
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              npm run migrations 

      - run:
          name: Send migrations status to kvdb.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl -k https://kvdb.io/Y9jpPoK3nS5VZSsnKyBRv3/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar, gzip, nodejs
          command: |
            yum update -y
            curl â€“sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install nodejs -y
            yum install tar -y
            yum install gzip -y     
      - attach_workspace:
          at: ~/
      - run:
          name: install Python, Ansible
          command: |
            
            yum install python3 -y
            yum install python3-pip -y
            pip3 install ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:logical-id,Values=EC2Instance" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name : Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
                fingerprints: ["c3:e6:38:e9:9f:b0:1d:6a:1f:6d:11:49:0d:e9:93:c6"] 
      - run:
          name: install Python, Ansible, nodejs, tar, gzip
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            apk add --update nodejs npm
            apk add --update npm
            pip3 install awscli
      - run: 
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar --ignore-failed-read --exclude=artifact.tar.gz -czvf .circleci/ansible/roles/deploy/files/artifact.tar.gz .
      - run:
          name: check
          command: |
            echo "$(ls .circleci/ansible/roles/deploy/files)"
      - run:
          name: Run Playbook 
          command: |
            cd .circleci/ansible
            echo "Content  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: install curl, nodejs, npm
          command: |
            apk add --update curl
            apk add --update nodejs
            apk add --update npm
            pip3 install awscli

      - run:
          name: Run smoke test for backend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:logical-id,Values=EC2Instance" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Run smoke test for frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              echo "Smoke test passed"
              return 0
            else
              return 1
            fi
      - destroy_environment
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  cloufront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            yum update -y
            curl â€“sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install nodejs -y
            yum install tar -y
            yum install gzip -y
      - attach_workspace: 
          at: ~/
      - run:
          name: change origin to  new s3 bucket
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            yum update -y
            curl â€“sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install nodejs -y
            yum install tar -y
            yum install gzip -y
      - attach_workspace: 
          at: ~/
      - run:
          name: Fetch the old workflow ID
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"  
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Delete the old stack
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]; then
              echo "Stack exists"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "No stack to delete"
            fi      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-backend
            - scan-frontend
      - configure-infrastracture:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastracture]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [deploy-frontend]
      - smoke-test:
          requires: [deploy-backend]
      - cloufront-update:
          requires: [smoke-test]
      - cleanup:
           requires: [cloufront-update] 
  
