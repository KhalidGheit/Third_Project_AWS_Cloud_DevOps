version: 2.1

jobs:

# Building the application
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test-front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: test-back-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-front-end
          command: |
            cd frontend
            npm install
            
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-back-end
          command: |
            cd backend
            npm install
            npm install --save-dev webpack@5.74.0
            npm audit fix --audit-level=critical --force
            npm fund
            npm audit fix
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides "ID=${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides "ID=${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: install tar
          command: |
            yum update -y
            yum install tar -y
            yum install gzip -y
  
      - run:
          name: Fetch public IP of EC2 instance
          command: |
            echo "ec2_instance_ip=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)" >> $CIRCLE_WORKSPACE/inventory.txt  

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
  configure-infrastracture:
    docker:
      - image: python:3.7-alpine3.11
    steps:
        - checkout
        - attach_workspace:
            at: ~/
        - add_ssh_keys:
                fingerprints: ["c3:e6:38:e9:9f:b0:1d:6a:1f:6d:11:49:0d:e9:93:c6"] 
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
              apk add --update tar
              apk add --update gzip
        - run:
            name: Run Playbook and Configure server
            command: |
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              npm run migrations >> migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl -k https://kvdb.io/Y9jpPoK3nS5VZSsnKyBRv3/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar, gzip, nodejs
          command: |
            yum update -y
            curl â€“sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install nodejs -y
            yum install tar -y
            yum install gzip -y     
      - attach_workspace:
          at: ~/
      - run:
          name: install Python, Ansible
          command: |
            
            yum install python3 -y
            yum install python3-pip -y
            pip3 install ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws cloudformation describe-instances --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name : Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
                fingerprints: ["c3:e6:38:e9:9f:b0:1d:6a:1f:6d:11:49:0d:e9:93:c6"] 
      - run:
          name: install Python, Ansible, nodejs, tar, gzip
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            apk add --update nodejs npm
            apk add --update npm
      - run:
          name: Run pwd
          command: |
            pwd
      - run: 
          name: Run Playbook and Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
workflows: 
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - deploy-infrastructure:
      #     requires:
      #       - test-frontend
      #       - test-backend
      #       - scan-backend
      #       - scan-frontend
      # - configure-infrastracture:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastracture]
      # - deploy-frontend:
      #     requires: [run-migrations]
      - deploy-backend
          # requires: [deploy-frontend]
          
